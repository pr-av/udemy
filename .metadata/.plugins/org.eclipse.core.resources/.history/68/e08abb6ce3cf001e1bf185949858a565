package com.example.demo.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.Service.IAccountService;
import com.example.demo.constants.AccountsConstants;
import com.example.demo.dto.CustomerDto;
import com.example.demo.dto.ErrorResponseDto;
import com.example.demo.dto.ResponseDto;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import jakarta.validation.constraints.Pattern;
import lombok.AllArgsConstructor;
@Tag(
		name="CRUD Operations for Accounts in Easy Bank",
		description="CRUD API's to Create,update,delete And Fetch details from Accounts"
				
				)
@RestController
@RequestMapping(path="/api", produces= {MediaType.APPLICATION_JSON_VALUE})
@AllArgsConstructor
@Validated
public class AccountsController {

	@Autowired
	IAccountService accountService;
	
	
	public AccountsController(IAccountService accountService) {
		this.accountService=accountService;
	}
	
	
	@Value("${build.version}")
	private double buildVersion;
	
	
	@Operation(
			summary="Create Accounts RestApi",
			description="Creating new Account for Easy bank"
	)
	@ApiResponse(
			responseCode="201",
			description="HTTP Status Created"
			)
	@PostMapping("/createAccount")
	public ResponseEntity<ResponseDto> createAccount(@RequestBody
			@Valid CustomerDto customerDto){
		accountService.createAccount(customerDto);
		return  ResponseEntity.status(HttpStatus.CREATED).body(new ResponseDto(AccountsConstants.StATUS_201,AccountsConstants.MESAAGE_201));
	}
	

	@Operation(
			summary="Fetch Accounts RestApi",
			description="Fetch details of Customer and AccountDetails based on Mobile Number"
	)
	@ApiResponse(
			responseCode="200",
			description="HTTP Status OK"
			)
	@GetMapping("/fetchAccountDetails")
	public ResponseEntity<CustomerDto> fetchAccountDetails(@RequestParam 
			@Pattern(regexp="(^$|[0-9]{10})", message="Mobile number must be 10 digits")String mobileNumber){
		CustomerDto customerDto=accountService.fetchAccountsDetails(mobileNumber);
		return ResponseEntity.status(HttpStatus.OK).body(customerDto);
	}
	

	@Operation(
			summary="Update Accounts RestApi",
			description="Updating customer and AccountDetails based on mobilenumber for Easy bank"
	)
	@ApiResponses({
	@ApiResponse(
		responseCode="200",
			description="HTTP Status OK"
			),
	@ApiResponse(
			responseCode="417",
				description="Expectation failed"
				),
	@ApiResponse(
			responseCode="500",
				description="HTTP Status Internal Server Error",
				content=@Content(
					schema=@Schema(implementation=ErrorResponseDto.class)
				))})
	@PutMapping("/updateAccountDetails")
	public ResponseEntity<ResponseDto> updateAccountDetails(@RequestBody @Valid CustomerDto customerDto){
		Boolean isUpdated=accountService.updateAccount(customerDto);
		if(isUpdated) 
			return ResponseEntity.status(HttpStatus.OK).body(new ResponseDto(AccountsConstants.STATUS_200, AccountsConstants.MESSAGE_200));
		else
			return ResponseEntity.status(HttpStatus.EXPECTATION_FAILED).body(new ResponseDto(AccountsConstants.STATUS_417, AccountsConstants.MESSAGE_417_UPDATE));
	}
	
	
	@Operation(
			summary="Delete  customer and Accounts RestApi",
			description="Delete customer and AccountDetails based on mobilenumber for Easy bank"
	)
	@ApiResponses({
	@ApiResponse(
		responseCode="200",
			description="HTTP Status OK"
			),
	@ApiResponse(
			responseCode="417",
				description="Expectation failed"
				),
	@ApiResponse(
			responseCode="500",
				description="HTTP Status Internal Server Error",
						content=@Content(
								schema=@Schema(implementation=ErrorResponseDto.class)
				))})
	@DeleteMapping("/deleteAccount")
	public ResponseEntity<ResponseDto> deleteAccount(@RequestParam 
			@Pattern(regexp="(^$|[0-9]{10})", message="Mobile number must be 10 digits") String mobileNumber){
		Boolean isDeleted=accountService.deleteAccount(mobileNumber);
		if(isDeleted) 
			return ResponseEntity.status(HttpStatus.ACCEPTED).body(new ResponseDto(AccountsConstants.STATUS_200, AccountsConstants.MESSAGE_200));
		else
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(new ResponseDto(AccountsConstants.STATUS_500, AccountsConstants.MESSAGE_500));
	}
	
	
	@GetMapping("/buildInfo")
	public ResponseEntity<?> getBuildInfo(){
		return ResponseEntity.status(HttpStatus.OK).body(buildVersion);
	}
}
