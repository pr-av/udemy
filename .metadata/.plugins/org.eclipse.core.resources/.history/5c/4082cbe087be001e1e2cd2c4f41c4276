package com.example.demo.Exception;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.FieldError;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

import com.example.demo.dto.ErrorResponseDto;

@ControllerAdvice
public class GlobalExceptionHandler extends ResponseEntityExceptionHandler{

	
	
	@Override
	protected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex,
			HttpHeaders headers, HttpStatusCode status, WebRequest request) {
		Map<String,String> validateErrors=new HashMap<>();
		List<ObjectError> validateErrorsList=ex.getBindingResult().getAllErrors();
		validateErrorsList.forEach((error)->{
			String fieldName=((FieldError)error).getField());
		}
		);
		return super.handleMethodArgumentNotValid(ex, headers, status, request);
	}
	
	@ExceptionHandler(Exception.class)
	public ResponseEntity<ErrorResponseDto> handleGlobalException(Exception exception,WebRequest webRequest){
		ErrorResponseDto errorResponseDto  =new ErrorResponseDto(webRequest.getDescription(false),
				HttpStatus.INTERNAL_SERVER_ERROR,exception.getMessage(),LocalDateTime.now());
		return new ResponseEntity<ErrorResponseDto>(errorResponseDto,HttpStatus.INTERNAL_SERVER_ERROR);
		
	}
	
	
	@ExceptionHandler(CustomerAlreadyExistsException.class)
	public ResponseEntity<ErrorResponseDto> handleCustomerAlreadyExistsException(CustomerAlreadyExistsException customerAlreadyExistsException,WebRequest webRequest){
		ErrorResponseDto errorResponseDto  =new ErrorResponseDto(webRequest.getDescription(false),
				HttpStatus.BAD_REQUEST,customerAlreadyExistsException.getMessage(),LocalDateTime.now());
		return new ResponseEntity<ErrorResponseDto>(errorResponseDto,HttpStatus.BAD_REQUEST);
		
	}
	
	@ExceptionHandler(ResourceNotFoundException.class)
	public ResponseEntity<ErrorResponseDto> handleResourceNotFoundException(ResourceNotFoundException resourceNotFoundException,WebRequest webRequest){
		ErrorResponseDto errorResponseDto  =new ErrorResponseDto(webRequest.getDescription(false),
				HttpStatus.BAD_REQUEST,resourceNotFoundException.getMessage(),LocalDateTime.now());
		return new ResponseEntity<ErrorResponseDto>(errorResponseDto,HttpStatus.BAD_REQUEST);
		
	}
}
